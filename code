#include "esp_camera.h"
#include <WiFi.h>
#include <ESP32Servo.h>
#include <FS.h>
#include <LittleFS.h>
#include <ESP_Mail_Client.h>
#include <WiFiUdp.h>
#include "time.h"

// WiFi Credentials
const char* ssid = "OnePlus Nord CE4";
const char* password = "123321123";

// Email SMTP Server Settings
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465
#define AUTHOR_EMAIL "220170111102@vgecg.ac.in"
#define AUTHOR_PASSWORD "pljriiuaipqtnoro"  // Use Gmail App Password if using Gmail
#define RECIPIENT_EMAIL "anuragpu6353@gmail.com"
#define EMAIL_SUBJECT "Motion Detected - ESP32-CAM Photo"

#define PIR_PIN 13
#define SERVO_PIN 12

#define PHOTO_PATH "/photo.jpg"
#define PHOTO_NAME "photo.jpg"

// ESP32-CAM AI Thinker module pin definition
#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27
#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22

// NTP Time settings for India Standard Time
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 19800;
const int daylightOffset_sec = 0;

Servo myServo;
SMTPSession smtp;

// Function prototypes
void capturePhotoSaveLittleFS();
void sendEmailWithPhoto();
void smtpCallback(SMTP_Status status);

// Global variables for servo and motion state
bool motionDetected = false;
unsigned long motionPauseStart = 0;
const unsigned long motionPauseDuration = 10000; // 10 seconds pause after motion
int servoPos = 0;
int servoIncrement = 5;

void setup() {
  Serial.begin(115200);

  myServo.attach(SERVO_PIN);
  pinMode(PIR_PIN, INPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("WiFi Connected");

  // Initialize time via NTP
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.print("Waiting for time");
  time_t now = time(nullptr);
  while (now < 8 * 3600 * 2) {
    delay(500);
    Serial.print(".");
    now = time(nullptr);
  }
  Serial.println("Time set!");

  // Initialize LittleFS
  if (!LittleFS.begin()) {
    Serial.println("An Error has occurred while mounting LittleFS");
    return;
  }

  // Configure camera
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_XGA;  // 1024x768
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;  // 800x600
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  Serial.println("Camera initialized");
  Serial.println("Ready to detect motion...");
}

void loop() {
  int pirState = digitalRead(PIR_PIN);

  if (pirState == HIGH && !motionDetected) {
    Serial.println("Motion detected!");
    motionDetected = true;
    motionPauseStart = millis();

    // Pause servo and do photo capture and email sending
    capturePhotoSaveLittleFS();
    sendEmailWithPhoto();
  }

  if (motionDetected) {
    // During pause, do not move servo
    if (millis() - motionPauseStart > motionPauseDuration) {
      motionDetected = false; // Resume servo
      Serial.println("Resuming servo rotation...");
    }
  } else {
    // Sweep servo continuously between 0 and 180 degrees
    servoPos += servoIncrement;
    if (servoPos >= 180 || servoPos <= 0) {
      servoIncrement = -servoIncrement; // Reverse direction
    }
    myServo.write(servoPos);
    delay(50); // For smooth rotation
  }
}

void capturePhotoSaveLittleFS() {
  camera_fb_t* fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  File file = LittleFS.open(PHOTO_PATH, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file in LittleFS");
    esp_camera_fb_return(fb);
    return;
  }

  file.write(fb->buf, fb->len);
  file.close();
  esp_camera_fb_return(fb);
  Serial.println("Photo captured and saved to LittleFS");
}

void sendEmailWithPhoto() {
  smtp.debug(1);
  smtp.callback(smtpCallback);

  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  SMTP_Message message;
  message.sender.name = "ESP32-CAM";
  message.sender.email = AUTHOR_EMAIL;
  message.subject = EMAIL_SUBJECT;
  message.addRecipient("User", RECIPIENT_EMAIL);

  message.text.content = "Motion detected! See the attached photo.";

  SMTP_Attachment att;
  att.descr.filename = PHOTO_NAME;
  att.descr.mime = "image/jpeg";
  att.file.path = PHOTO_PATH;
  att.file.storage_type = esp_mail_file_storage_type_flash;
  att.descr.transfer_encoding = Content_Transfer_Encoding::enc_base64;

  message.addAttachment(att);

  if (!smtp.connect(&session)) {
    Serial.println("Could not connect to SMTP server");
    return;
  }

  if (!MailClient.sendMail(&smtp, &message, true))
    Serial.println("Email send failed: " + smtp.errorReason());
  else
    Serial.println("Email sent successfully");

  message.clear();
}

void smtpCallback(SMTP_Status status) {
  Serial.println(status.info());
}
